<?php

/**
 * This class is used to get videos from
 * Metacafe.com
 *
 * Parameters for all API requests:
 * 
 */
 


class pornhub extends cb_mass_embed
{
	
	var $xml_api = true;
	
	var $result_offset = 1;
	
	var $max_result = 27;
	
	var $results_got = 0;
	
	var $website = 'pornhub';
	
	
	/**
	 * Function used to create API FEED URL
	 * this url will be called by SERVER and FETCH results and save it in 
	 * $html_data
	 */
	function get_feed_url()
	{
		$APIUrl = 'http://www.pornhub.com/video/search?';
		
		#Adding keywords
		$APIUrl .= 'search='.$this->get_keyword_query();
		#Sorting
		$APIUrl .= '&o='.$this->get_sort_type();
		#Time
		$APIUrl .= '&t='.$this->get_sort_time();
		$APIUrl .= '&page='.$this->result_offset;
		
		return $this->feed_url = $APIUrl ;
	}
	
	
	
	/**
	 * Function used to return API ready result type
	 * ie if user set RELEVENCE then Youtube's API result type would be orderby=relevance
	 */
	function get_sort_type()
	{
		$type = $this->sort_type;
		$mc_sortings = array
		('published'=>'mr',
		 'views'=>'mv','rating'=>'tr'
		 );
		$sorttype = $mc_sortings[$type];
		if($sorttype)
			return $sorttype;
		else
			return 'mr';
	}
	
	/**
	 * function used to get time span
	 */
	function get_sort_time()
	{
		$type = $this->result_time;
		$mc_sortings = array
		('all_time'=>'a',
		 'today'=>'t','this_week'=>'w','this_month'=>'m'
		 );
		$sorttype = $mc_sortings[$type];
		if($sorttype)
			return $sorttype;
		else
			return 'm';
	}
	
	
	/**
	 * Function used to get max results that an API can request
	 */
	function max_results()
	{
		if($this->max_results>50)
			return 50;
		else
			return $this->max_results;
	}
	
	/**
	 * Function used to convert KEYWORDS into QUERY
	 */
	function get_keyword_query()
	{
		return $this->keywords;
	}
	
	/**
	 * Function used to parse the feed and convert it into an array
	 */
	function parse_and_get_results()
	{
		$this->results_got = 1;
		$vids = array();
		
		
		while($this->results_got<=$this->results)
		{
			if($this->tries > $this->max_tries)
				break;
			$this->tries++;
			
			$result = $this->open_page($this->get_feed_url());			
			preg_match_all('/<img src="(.*)small\.jpg(.*)" alt=(.*)class="rotating"(.*) \/>/',$result,$images);
			preg_match_all('/<a href=\"(.*)viewkey=(.*)\" title="(.*)" class="title">/Ui',($result),$title);
			preg_match_all('/<var class="duration">(.*)<\/var>/Ui',($result),$duration);
			preg_match_all('/<span class="views"><var>([0-9]+)<\/var>/Ui',($result),$views);
			preg_match_all('/<div class="value">([0-9]+)\%<\/div>/Ui',($result),$rating);
			preg_match_all('/class="rotating" id="([0-9]+)"/Ui',($result),$eid);

			$total = count($title[3]);
			
			$entries = array();			
			for($i=0;$i<=$total;$i++)
			{
				if($title[3][$i])
				{
					
					$entries[] = array(
					'title'=>$title[3][$i],
					'tags'=>genTags(str_replace(' ',',',$title[3][$i])),
					'description'=>$title[3][$i],
					'unique_id' => $title[2][$i],
					'eid' => $eid[1][$i],
					'website' => 'http://www.pornhub.com/view_video.php?viewkey='.$title[2][$i],
					'duration' => validate_duration($duration[1][$i]),
					'views' => $views[1][$i],
					'rating' => $rating[1][$i]/10,
					'rated_by' => round($views[1][$i]/500),
					'date_added'=>now(),
					'thumb' => array($images[1][$i].'small2.jpg',
					$images[1][$i].'small3.jpg',$images[1][$i].'small4.jpg','big'=>$images[1][$i].'large.jpg'));
				}
			}
			//exit(pr($entries,true));
			
			$this->results_found = count($entries);
				
			foreach($entries as $entry)
			{
				if($this->results_got > $this->results)
					break;
				if(is_array($entry) && !$this->data_exists($entry['unique_id']))
				{
					$count = $this->results_got;
					$vids[$count]['title'] = $entry['title'];
					$vids[$count]['description'] = $entry['description'];
					$vids[$count]['tags'] = $entry['tags'];
					
					$vids[$count]['embed_code'] = $this->embed_video_code($entry['eid']);
					$vids[$count]['duration'] = $entry['duration'];
					
					$vids[$count]['views'] = $entry['views'];
					$vids[$count]['rating'] = $entry['rating'];
					$vids[$count]['rated_by'] = $entry['rated_by'];
					$vids[$count]['category_attr'] = NULL;
					
					$vids[$count]['website'] = $this->website;
					$vids[$count]['url'] = $entry['url'];
					$vids[$count]['unique_id'] = $entry['unique_id'];

					$vids[$count]['thumbs'] = $entry['thumb'];
					
					$vids[$count]['date_added'] = now();
					
					//Fetching Comments
					$comments = $this->get_comments($entry['link']);
					if($comments)
						$vids[$count]['comments'] = $comments;
						
					$this->results_got++;
				}		
			}
			
			$this->get_the_offset();
		}
		
		return $this->results_array = $vids;
	}
	
	
	function parse_get_results($apiFeed=NULL)
	{
		
		$this->results_got = 1;
		$vids = array();
		
		if($this->tries > $this->max_tries)
			break;
		$this->tries++;
		$this->result_offset = $this->this_page;
		
		if(!$apiFeed)
		$result = $this->open_page($this->get_feed_url());
		else
		$result = $this->open_page($apiFeed);
				
		preg_match_all('/<img src="(.*)small\.jpg(.*)" alt=(.*)class="rotating"(.*) \/>/',$result,$images);
		preg_match_all('/<a href=\"(.*)viewkey=(.*)\" title="(.*)" class="title">/Ui',($result),$title);
		preg_match_all('/<var class="duration">(.*)<\/var>/Ui',($result),$duration);
		preg_match_all('/<span class="views"><var>([0-9]+)<\/var>/Ui',($result),$views);
		preg_match_all('/<div class="value">([0-9]+)\%<\/div>/Ui',($result),$rating);
		preg_match_all('/class="rotating" id="([0-9]+)"/Ui',($result),$eid);

		$total = count($title[3]);
		
		$entries = array();			
		for($i=0;$i<=$total;$i++)
		{
			if($title[3][$i])
			{
				$entries[] = array(
				'title'=>$title[3][$i],
				'tags'=>genTags(str_replace(' ',',',$title[3][$i])),
				'description'=>$title[3][$i],
				'unique_id' => $title[2][$i],
				'eid' => $eid[1][$i],
				'website' => 'http://www.pornhub.com/view_video.php?viewkey='.$title[2][$i],
				'duration' => validate_duration($duration[1][$i]),
				'views' => $views[1][$i],
				'rating' => $rating[1][$i]/10,
				'rated_by' => round($views[1][$i]/500),
				'date_added'=>now(),
				'thumb' => array($images[1][$i].'small2.jpg',
				$images[1][$i].'small3.jpg',$images[1][$i].'small4.jpg','big'=>$images[1][$i].'large.jpg'));
			}
		}
		//exit(pr($entries,true));
		
		$this->results_found = count($entries);
			
		foreach($entries as $entry)
		{
			if($this->results_got > $this->results)
				break;
			if(is_array($entry) && !$this->data_exists($entry['unique_id']))
			{
				$count = $this->results_got;
				$vids[$count]['title'] = $entry['title'];
				$vids[$count]['description'] = $entry['description'];
				$vids[$count]['tags'] = $entry['tags'];
				
				$vids[$count]['embed_code'] = $this->embed_video_code($entry['eid']);
				$vids[$count]['duration'] = $entry['duration'];
				
				$vids[$count]['views'] = $entry['views'];
				$vids[$count]['rating'] = $entry['rating'];
				$vids[$count]['rated_by'] = $entry['rated_by'];
				$vids[$count]['category_attr'] = NULL;
				
				$vids[$count]['website'] = $this->website;
				$vids[$count]['url'] = $entry['url'];
				$vids[$count]['unique_id'] = $entry['unique_id'];

				$vids[$count]['thumbs'] = $entry['thumb'];
				
				$vids[$count]['date_added'] = now();
				
				//Fetching Comments
				$comments = $this->get_comments($entry['link']);
				if($comments)
					$vids[$count]['comments'] = $comments;
					
				$this->results_got++;
			}		
		}
	
		return $vids;
	}
	
	
	
	/**
	 * Function used to generate Embed Video Code
	 */
	function embed_video_code($code)
	{
		$sample = '<object type="application/x-shockwave-flash" 
			data="http://cdn1.static.pornhub.phncdn.com/flash/embed_player.swf" width="608" height="476"
			><param name="movie" value="http://cdn1.static.pornhub.phncdn.com/flash/embed_player.swf" />
			<param name="allowfullscreen" value="true" />
			<param name="allowScriptAccess" value="always" />
			<param name="FlashVars" value="options=http://www.pornhub.com/embed_player.php?id='.$code.'"/></object>';
		return $sample;
		
	}
	
	/**
	 * function used to get offseet
	 * if will return doubles the MAX_RESULT each time it is called
	 */
	function get_the_offset()
	{
		return $this->result_offset++;
	}
	
	
	/**
	 * Function used to get video comments
	 */
	function get_comments($url)
	{
		return false;
		if(!$url || !$this->import_comments || $this->import_comments=="no")
			return false;
		$content = str_replace("\n", " ", trim($this->open_page($url))); 
		preg_match_all('/<div id="(.*)" class="Node">(.*)<p>(.*)<\/p>(.*)<em>By <a href="(.*)">(.*)<\/a>(.*)<\/div>/Uim',$content,$matches);
		$comments = $matches[3];
		$users = $matches[6];
		$total = count($comments);
		$comm_array = array();
		for($i=0;$i<$total;$i++)
		$comm_array[] = array('name'=>$users[$i],'comment'=>strip_tags($comments[$i]),'email'=>'anonymous@metacafe.com');
		return $comm_array;
	}
	
	
	/**
	 * Function used to get details from url
	 */
	function get_details_from_url($url)
	{
		return false;
		//Getting Video Title
		preg_match_all('/<div class="video-title-nf" style="(.*)"><h1>(.*)<\/h1><\/div>/Ui',$result,$titles);
		$title = $titles[2][0];
		
		//Getting Video Tags
		preg_match_all('/<p>Tags: (.*)<\/p>/i',$result,$tags);
		preg_match_all('/<a href="(.*)">(.*)<\/a>/Ui',$tags[1][0],$tags);
		$tags  = implode(',',$tags[2]);
	}
}

?>