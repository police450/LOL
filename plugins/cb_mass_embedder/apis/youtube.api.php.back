<?php

/**
 * This class is used to get videos from
 * Youtube.com
 *
 * Parameters for all API requests:
 * client
 * key
 *
 * Search parameters:
 * caption
 * category
 * format
 * location
 * location-radius
 * lr
 * orderby
 * q
 * safeSearch
 * time
 * uploader
 */
 


class youtube extends cb_mass_embed
{
	
	/**
	 * Developers id is used to tell .youtube.com from which developer
	 * is this request coming from
	 * this DEVID is CLIPBUCKET's
	 */
	var $dev_id = "AI39si6AZRj-Ju9O0U2iPbGnF5aBSbI2Cq3OFL72kMjt_eFcL20D6s2mlByWFd0HP-6rD0V8iaLl7JU1sy6SFwgNs18sFAiJAw";
	
	var $xml_api = true;
	
	var $result_offset = 1;
	
	var $max_result = 50;
	
	var $results_got = 0;
	
	var $website = 'youtube';
	
	
	/**
	 * Function used to create API FEED URL
	 * this url will be called by SERVER and FETCH results and save it in 
	 * $html_data
	 */
	function get_feed_url()
	{
		$APIUrl = 'http://gdata.youtube.com/feeds/api/videos';
		
		#Adding keywords
		$APIUrl .= '?q='.$this->get_keyword_query();
		#Sorting
		$APIUrl .= '&orderby='.$this->get_sort_type();
		#Time
		$APIUrl .= '&time='.$this->result_time;
		#Results
		$APIUrl .= '&max-results='.$this->max_results();
		#Setting API to SEND STRING REQUEST
		$APIUrl .= '&strict=true';
		#getting pretty print
		$APIUrl .= '&prettyprint=true';
		#Setting API version
		$APIUrl .= '&v=2';
		#Setting API DEV ID
		$APIUrl .= '&key='.$this->dev_id;
		#Setting API DEV ID
		$APIUrl .= '&start-index='.$this->result_offset;
		
		return $this->feed_url = $APIUrl ;
	}
	
	
	
	/**
	 * Function used to return API ready result type
	 * ie if user set RELEVENCE then Youtube's API result type would be orderby=relevance
	 */
	function get_sort_type()
	{
		$type = $this->sort_type;
		$Yt_sortings = array
		('relevance'=>'relevance', 'published'=>'published',
		 'views'=>'viewCount','rating'=>'rating'
		 );
		$sorttype = $Yt_sortings[$type];
		if($sorttype)
			return $sorttype;
		else
			return $Yt_sortings['published'];
	}
	
	
	/**
	 * Function used to get max results that an API can request
	 */
	function max_results()
	{
		if($this->max_results>50)
			return 50;
		else
			return $this->max_results;
	}
	
	/**
	 * Function used to convert KEYWORDS into QUERY
	 */
	function get_keyword_query()
	{
		$keywords = $this->keywords;
		$keywords = preg_replace("/, /",",",$keywords);
		$keywords = preg_replace("/ ,/",",",$keywords);
		$keywords = explode(",",$keywords);
		$query = "";
		foreach($keywords as $keyword)
		{
			if(!empty($query))
				$query .="%7C";
			$query .= urlencode($keyword);
		}
		
		return $query;
	}
	
	/**
	 * Function used to parse the feed and convert it into an array
	 */
	function parse_and_get_results($apiFeed=NULL)
	{
		$this->results_got = 1;
		$vids = array();
		
		while($this->results_got<=$this->results)
		{
			if($this->tries > $this->max_tries)
				break;
			$this->tries++;
			
			if(!$apiFeed)
			$array = xml2array($this->get_feed_url());
			else
			$array = xml2array($apiFeed);
			
		
			//$array = xml2array('http://localhost/clipbucket/2.x/2/upload/tester/feedarab.xml');
			$entries = $array['feed']['entry'];

			if(empty($entries[0]['title']) && empty($entries['title'] ))
				break;			
			
			if($entries['title'])
				$entries = array($entries);
			
			$this->results_found = count($entries);
			
			foreach($entries as $entry)
			{
				if($this->results_got > $this->results)
					break;
				
				if(!$this->ignore_data_exists)
					$data_exists = $this->data_exists($entry['media:group']['yt:videoid']);
				else
					$data_exists = false;
					
				if(is_array($entry) && isset($entry['title']) && (isset($entry['media:group']['media:content_attr'])
					||isset($entry['content_attr']['src'])) && !$data_exists)
				{
					$count = $this->results_got;
					$vids[$count]['title'] = $entry['title'];
					$vids[$count]['description'] = $entry['media:group']['media:description'];
					$vids[$count]['tags'] = $entry['media:group']['media:keywords'];
					
					if(isset($entry['media:group']['media:content_attr']))
					{
						$vids[$count]['embed_code'] = $this->embed_video_code($entry['media:group']['media:content_attr']['url']);
						$vids[$count]['duration'] = $entry['media:group']['media:content_attr']['duration'];
					}elseif(isset($entry['content_attr']['src'])){
						$vids[$count]['embed_code'] = $this->embed_video_code($entry['content_attr']['src']);
						 $vids[$count]['duration'] = $entry['media:group']['media:content']['0_attr']['duration'];
					}
					
					$vids[$count]['views'] = $entry['yt:statistics_attr']['viewCount'];
					$vids[$count]['rating'] = $entry['gd:rating_attr']['average']*2;
					$vids[$count]['rated_by'] = $entry['gd:rating_attr']['numRaters'];
					if($entry['media:group']['media:category'])
						$vids[$count]['category_attr'] = strtolower($entry['media:group']['media:category']);
					
					$vids[$count]['website'] = $this->website;
					$vids[$count]['url'] = 'http://www.youtube.com/watch?v='.$entry['media:group']['yt:videoid'];
					$vids[$count]['unique_id'] = $entry['media:group']['yt:videoid'];
					$comments = $this->get_comments($entry['media:group']['yt:videoid']);
					/*echo '===============================================';
					pr($comments,true);
					echo '===============================================';
					*/
					if($comments)
						$vids[$count]['comments'] = $comments;
					$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['0_attr']['url'];
					$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['1_attr']['url'];
					$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['2_attr']['url'];
					$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['3_attr']['url'];
					$vids[$count]['thumbs']['big'] = 'http://i3.ytimg.com/vi/'.$entry['media:group']['yt:videoid'].'/0.jpg';
					
					$vids[$count]['date_added'] = $entry['published'];
					$this->results_got++;
				}		
			}
			
			$this->get_the_offset();
		}
		
		return $this->results_array = $vids;
	}
	
	
	/*
	 *
	 */
	 
	function parse_get_results($apiFeed=NULL)
	{
		$this->results_got = 1;
		$vids = array();
		
			$this->tries++;
		
		if(!$apiFeed)
		$array = xml2array($this->get_feed_url());
		else
		$array = xml2array($apiFeed);
		
	
		//$array = xml2array('http://localhost/source_forge/cbv2/trunk/upload/tester/tester.xml');
		$entries = $array['feed']['entry'];

		if(empty($entries[0]['title']) && empty($entries['title'] ))
			break;			
		
		if($entries['title'])
			$entries = array($entries);
		
		$this->results_found = count($entries);
		
		foreach($entries as $entry)
		{
			if($this->results_got > $this->results)
				break;
	
			if(is_array($entry) && isset($entry['title']) && (isset($entry['media:group']['media:content_attr'])
				||isset($entry['content_attr']['src'])))
			{
				$count = $this->results_got;
				$vids[$count]['title'] = $entry['title'];
				$vids[$count]['description'] = $entry['media:group']['media:description'];
				$vids[$count]['tags'] = $entry['media:group']['media:keywords'];
				
				if(isset($entry['media:group']['media:content_attr']))
				{
					$vids[$count]['embed_code'] = $this->embed_video_code($entry['media:group']['media:content_attr']['url']);
					$vids[$count]['duration'] = $entry['media:group']['media:content_attr']['duration'];
				}elseif(isset($entry['content_attr']['src'])){
					$vids[$count]['embed_code'] = $this->embed_video_code($entry['content_attr']['src']);
					 $vids[$count]['duration'] = $entry['media:group']['media:content']['0_attr']['duration'];
				}
				
				$vids[$count]['views'] = $entry['yt:statistics_attr']['viewCount'];
				$vids[$count]['rating'] = $entry['gd:rating_attr']['average']*2;
				$vids[$count]['rated_by'] = $entry['gd:rating_attr']['numRaters'];
				if($vids[$count]['category_attr'])
				$vids[$count]['category_attr'] = strtolower($entry['media:group']['media:category']);
				
				$vids[$count]['website'] = $this->website;
				$vids[$count]['url'] = 'http://www.youtube.com/watch?v='.$entry['media:group']['yt:videoid'];
				$vids[$count]['unique_id'] = $entry['media:group']['yt:videoid'];
				$comments = $this->get_comments($entry['media:group']['yt:videoid']);

				if($comments)
				$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['0_attr']['url'];
					$vids[$count]['comments'] = $comments;
				$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['1_attr']['url'];
				$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['2_attr']['url'];
				$vids[$count]['thumbs'][] = $entry['media:group']['media:thumbnail']['3_attr']['url'];
				$vids[$count]['thumbs']['big'] = $entry['media:group']['media:thumbnail']['4_attr']['url'];
				
				$vids[$count]['date_added'] = $entry['published'];
				$this->results_got++;
			}		
		}
		
		return $vids;
	}
	
	
	
	/**
	 * Function used to generate Embed Video Code
	 */
	function embed_video_code($code)
	{
		$sample = '<object width="425" height="344"><param name="movie" value="{FILE}"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="{FILE}" type="application/x-shockwave-flash" width="425" height="344" allowscriptaccess="always" allowfullscreen="true"></embed></object>';
		$embed_video_code = preg_replace('/{FILE}/',$code,$sample);
		#exit($embed_video_code);
		return $embed_video_code;
	}
	
	/**
	 * function used to get offseet
	 * if will return doubles the MAX_RESULT each time it is called
	 */
	function get_the_offset()
	{
		return $this->result_offset += $this->max_result;
	}
	
	/**
	 * Function used to get video comments
	 */
	function get_comments($vid)
	{
		if(!$this->import_comments)	
			return false;
		$url = 'http://gdata.youtube.com/feeds/api/videos/'.$vid.'/comments';
		#exit($url);
		$comments = xml2array($url);
		$comments = $comments['feed']['entry'];
		$comm_array = array();
		$comment = array();
		if(count($comments)>0)
		{
			foreach($comments as $comment)
			{
				#echo $comment['content'].'<br/>';
				if(is_array($comment))
				$comm_array[] = array('name'=>$comment['author']['name'],'comment'=>$comment['content'],'email'=>'anonymous@youtube.com');
			}
			return $comm_array;
		}else
			return false;
	}
	
	/**
	 * Function used to convert time span into period
	 * so that only videos uploaded in specifi time frame are show or embed
	 */
	function get_time_span()
	{
		return $this->result_time;
	}
	
	/**
	 * Function used to get details from url
	 */
	function get_details_from_url($youtube_url)
	{
		echo $youtube_url.' youtube <br/>';
		$ParseUrl = parse_url($youtube_url);
		parse_str($ParseUrl['query'], $youtube_url_prop);
		$YouTubeId = isset($youtube_url_prop['v']) ? $youtube_url_prop['v'] : '';
		
		if ($YouTubeId && !$this->data_exists($YouTubeId))
		{
			$entry = xml2array('http://gdata.youtube.com/feeds/api/videos/'.$YouTubeId);
			
			$entry = $entry['entry'];
			$vids['title'] = $entry['title'];
			$vids['description'] = $entry['media:group']['media:description'];
			$vids['tags'] = $entry['media:group']['media:keywords'];
			
			if(isset($entry['media:group']['media:content']))
			{
				$vids['embed_code'] = $this->embed_video_code($entry['media:group']['media:content']['0_attr']['url']);
				$vids['duration'] = $entry['media:group']['media:content']['0_attr']['duration'];
			}elseif(isset($entry['content_attr']['src'])){
				$vids['embed_code'] = $this->embed_video_code($entry['content_attr']['src']);
				$vids['duration'] = $entry['media:group']['media:content']['0_attr']['duration'];
			}
			
			$vids['views'] = $entry['yt:statistics_attr']['viewCount'];
			$vids['rating'] = $entry['gd:rating_attr']['average']*2;
			$vids['rated_by'] = $entry['gd:rating_attr']['numRaters'];
			$vids['category_attr'] = strtolower($entry['media:group']['media:category']);
			
			$vids['website'] = $this->website;
			$vids['url'] = 'http://www.youtube.com/watch?v='.$YouTubeId;
			$vids['unique_id'] = $YouTubeId;
			$comments = $this->get_comments($YouTubeId);

			if($comments)
				$vids['comments'] = $comments;
				
			$vids['thumbs'][] = $entry['media:group']['media:thumbnail']['0_attr']['url'];
			$vids['thumbs'][] = $entry['media:group']['media:thumbnail']['1_attr']['url'];
			$vids['thumbs'][] = $entry['media:group']['media:thumbnail']['2_attr']['url'];
			$vids['thumbs']['big'] = $entry['media:group']['media:thumbnail']['3_attr']['url'];
			
			$vids['date_added'] = $entry['published'];
			
			return $vids;
		}
		else
			return false;
	}
	
	
	
	
	
	
	/**
	 * Function used to get data from user of youtube
	 */
	function get_data_from_user($username)
	{
		
		$APIUrl = 'http://gdata.youtube.com/feeds/api/users';
		
		#Adding keywords
		$APIUrl .= "/$username/uploads?v=2";
		#Sorting
		$APIUrl .= '&orderby='.$this->get_sort_type();
		#Time
		$APIUrl .= '&time='.$this->result_time;
		#Results
		$APIUrl .= '&max-results=50';

		#getting pretty print
		$APIUrl .= '&prettyprint=true';

		#Setting API DEV ID
		$APIUrl .= '&key='.$this->dev_id;
		#Setting API DEV ID
		$APIUrl .= '&start-index='.$this->result_offset;
		
		$this->parse_and_get_results($APIUrl);

	}
}

?>