<?php
/*@IGNORE@*/
/**
 * This Api is used to get videos from Break
 * Query
 * Sorting
 * Results
 * Page
 *
 * Website : Break
 */
 


class breakcom extends cb_mass_embed
{
	
	var $xml_api = true;
	
	var $result_offset = 1;
	
	var $results_got = 0;
	
	var $website = 'break';
	
	
	
	/**
	 * Function used to create API FEED URL
	 * this url will be called by SERVER and FETCH results and save it in 
	 * $html_data
	 */
	function get_feed_url()
	{
		$APIUrl = 'http://www.break.com/content/find';	
		#Adding keywords
		$APIUrl .= '?q='.$this->get_keyword_query();
		#Sorting
		$APIUrl .= '&sort='.$this->get_sort_type();
		#Time
		$APIUrl .= '&created='.get_time_span();
		#Pag
		$APIUrl .= '&page='.$this->result_offset;
		
		return $this->feed_url = $APIUrl ;
	}
	
	
	
	/**
	 * Function used to return API ready result type
	 * ie if user set RELEVENCE then Youtube's API result type would be orderby=relevance
	 */
	function get_sort_type()
	{
		$type = $this->sort_type;
		$mc_sortings = array
		('published'=>'newest',
		 'views'=>'views','rating'=>'rating'
		 );
		$sorttype = $mc_sortings[$type];
		if($sorttype)
			return $sorttype;
		else
			return 'rating';
	}
	
	
	/**
	 * Function used to get max results that an API can request
	 */
	function max_results()
	{
		if($this->max_results>50)
			return 50;
		else
			return $this->max_results;
	}
	
	/**
	 * Function used to convert KEYWORDS into QUERY
	 */
	function get_keyword_query()
	{
		$keywords = $this->keywords;
		$keywords = preg_replace("/, /",",",$keywords);
		$keywords = preg_replace("/ ,/",",",$keywords);	
		return urlencode($keywords);
	}
	
	/**
	 * Function used to parse the feed and convert it into an array
	 */
	function parse_and_get_results()
	{
		if($this->tries > $this->max_tries)
				break;
		$this->tries++;
		$this->results_got = 1;
		$vids = array();
		while($this->results_got<=$this->results)
		{
			$array = xml2array($this->get_feed_url());
			//$array = xml2array('http://www.metacafe.com/api/videos/?vq=stupid&orderby=viewCount');
			$entries = $array['rss']['channel']['item'];
			
			
			if(empty($entries[0]['title']) && empty($entries['title']))
				break;
			if($entries['title'])
				$entries = array($entries);
			
			$this->results_found = count($entries);
			if($this->results_found > $this->results)
				$this->results_found = $this->results;
			foreach($entries as $entry)
			{
				if($this->results_got > $this->results)
					break;
				if(is_array($entry) && isset($entry['media:title']) && isset($entry['media:description']) && !$this->data_exists($entry['id']))
				{
					$count = $this->results_got;
					$vids[$count]['title'] = $entry['media:title'];
					$vids[$count]['description'] = $entry['media:description'];
					$vids[$count]['tags'] = $entry['media:keywords'];
					
					$vids[$count]['embed_code'] = $this->embed_video_code($entry['media:content_attr']['url']);
					$vids[$count]['duration'] = $entry['media:content_attr']['duration'];

					preg_match("/\| (.*) views/",$entry['description'],$views);
					
					$vids[$count]['views'] = $views[1];
					$vids[$count]['rating'] = $entry['rank']*2;
					$vids[$count]['rated_by'] = $views[1];
					$vids[$count]['category_attr'] = NULL;
					
					$vids[$count]['website'] = $this->website;
					$vids[$count]['url'] = $entry['link'];
					$vids[$count]['unique_id'] = $entry['id'];

					$vids[$count]['thumbs'][] = $entry['media:thumbnail_attr']['url'];
					$vids[$count]['thumbs']['big'] = $entry['media:thumbnail_attr']['url'];
					
					$vids[$count]['date_added'] = date("Y-m-d H:i:s",strtotime($entry['pubDate']));
					
					//Fetching Comments
					$comments = $this->get_comments($entry['link']);
					if($comments)
						$vids[$count]['comments'] = $comments;
						
					$this->results_got++;
				}		
			}
			
			$this->get_the_offset();
		}
		
		return $this->results_array = $vids;
	}
	
	
	/**
	 * Function used to generate Embed Video Code
	 */
	function embed_video_code($code)
	{
		$sample = '<object width="425" height="344"><param name="movie" value="{FILE}"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="{FILE}" type="application/x-shockwave-flash" width="425" height="344" allowscriptaccess="always" allowfullscreen="true"></embed></object>';
		return preg_replace('/{FILE}/',$code,$sample);
		
	}
	
	/**
	 * function used to get offseet
	 * if will return doubles the MAX_RESULT each time it is called
	 */
	function get_the_offset()
	{
		return $this->result_offset += $this->max_result;
	}
	
	
	/**
	 * Function used to get video comments
	 */
	function get_comments($url)
	{
		if(!$url || !$this->import_comments || $this->import_comments=="no")
			return false;
		$content = str_replace("\n", " ", trim($this->open_page($url))); 
		preg_match_all('/<div id="(.*)" class="Node">(.*)<p>(.*)<\/p>(.*)<em>By <a href="(.*)">(.*)<\/a>(.*)<\/div>/Uim',$content,$matches);
		$comments = $matches[3];
		$users = $matches[6];
		$total = count($comments);
		$comm_array = array();
		for($i=0;$i<$total;$i++)
		$comm_array[] = array('name'=>$users[$i],'comment'=>strip_tags($comments[$i]),'email'=>'anonymous@metacafe.com');
		return $comm_array;
	}
	
	/**
	 * Function used to convert time span into period
	 * so that only videos uploaded in specifi time frame are show or embed
	 */
	function get_time_span()
	{
		$time = $this->result_time;
		$dmtime = array('today'=>'Today','this_month'=>'Month','this_week'=>'Week');
		if($dmtime[$time])
			return $dmtime[$time];
		else
			return 'Anytime';
	}
	
	/**
	 * Function used to get details from url
	 */
	function get_details_from_url($url)
	{
		return false;
	
	}
}

?>