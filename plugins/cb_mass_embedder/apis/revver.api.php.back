<?php

/**
 * This class is used to get videos from
 * Revver.com
 *
 * Parameters for all API requests:
 * query
 * sort_by
 * offset
 * max-results
 * 
 */
 


class revver extends cb_mass_embed
{
	
	var $xml_api = true;
	
	var $result_offset = 1;
	
	var $max_result = 50;
	
	var $results_got = 0;
	
	var $website = 'revver';
	
	var $video_page = '';
	
	/**
	 * Function used to create API FEED URL
	 * this url will be called by SERVER and FETCH results and save it in 
	 * $html_data
	 */
	function get_feed_url()
	{
		$APIUrl = 'http://feeds.revver.com/2.0/mrss/flash/search/';
		
		#Adding keywords
		$APIUrl .= $this->get_keyword_query().'/';
		#Sorting
		$APIUrl .= '?orderBy='.$this->get_sort_type();
		#Time
		$APIUrl .= '&time='.$this->result_time;
		#Results
		$APIUrl .= '&limit='.$this->max_results();
		$APIUrl .= '&start-index='.$this->result_offset;
		
		return $this->feed_url = $APIUrl ;
		
	}
	
	
	
	/**
	 * Function used to return API ready result type
	 * ie if user set RELEVENCE then Youtube's API result type would be orderby=relevance
	 */
	function get_sort_type()
	{
		$type = $this->sort_type;
		$mc_sortings = array
		('published'=>'createdDate',
		 'views'=>'views'
		 );
		$sorttype = $mc_sortings[$type];
		if($sorttype)
			return $sorttype;
		else
			return 'createdDate';
	}
	
	
	/**
	 * Function used to get max results that an API can request
	 */
	function max_results()
	{
		if($this->max_results>50)
			return 50;
		else
			return $this->max_results;
	}
	
	/**
	 * Function used to convert KEYWORDS into QUERY
	 */
	function get_keyword_query()
	{
		$keywords = $this->keywords;
		$keywords = preg_replace("/, /",",",$keywords);
		$keywords = preg_replace("/ ,/",",",$keywords);	
		return urlencode($keywords);
	}
	
	/**
	 * Function used to parse the feed and convert it into an array
	 */
	function parse_and_get_results()
	{
		$this->results_got = 1;
		$vids = array();
		while($this->results_got<=$this->results)
		{
			if($this->tries > $this->max_tries)
				break;
			$this->tries++;
			$array = xml2array($this->get_feed_url());
			//$array = xml2array('http://localhost/source_forge/cbv2/trunk/upload/tester/revver.xml');
			$entries = $array['rss']['channel']['item'];
					
			if(empty($entries[0]['title']) && empty($entries['title']))
				break;
			if($entries['title'])
				$entries = array($entries);
			
			$this->results_found = count($entries);
			
			if($this->results_found > $this->results)
				$this->results_found = $this->results;
				
			foreach($entries as $entry)
			{
				if($this->results_got > $this->results)
					break;
				if(is_array($entry) && isset($entry['title']) && isset($entry['media:description']) && !$this->data_exists(str_replace('http://revver.com/watch/','',$entry['guid'])))
				{
					$count = $this->results_got;
					$vids[$count]['title'] = $entry['title'];
					$vids[$count]['description'] = $entry['media:description'];
					$vids[$count]['tags'] = implode(',',$entry['category']);
					
					$vids[$count]['embed_code'] = $this->embed_video_code($entry['media:content_attr']['url']);
					$vids[$count]['duration'] = $entry['media:content_attr']['duration'];

					preg_match("/\| (.*) views/",$entry['description'],$views);
					
					$vids[$count]['views'] = $this->get_video_views($entry['link']);
					$vids[$count]['rating'] = 0;
					$vids[$count]['rated_by'] = 0;
					$vids[$count]['category_attr'] = NULL;
					
					$vids[$count]['website'] = $this->website;
					$vids[$count]['url'] = $entry['link'];
					$vids[$count]['unique_id'] = str_replace('http://revver.com/watch/','',$entry['guid']);

					$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'.jpg';
					$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-2.jpg';
					$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-3.jpg';
					$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-4.jpg';
					$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-6.jpg';
					
					$vids[$count]['thumbs']['big'] = 'http://frame.revver.com/frame/320x240/'.$vids[$count]['unique_id'].'-5.jpg';
					
					$vids[$count]['date_added'] = date("Y-m-d H:i:s",strtotime($entry['pubDate']));
					
					//Fetching Comments
					$comments = $this->get_comments($entry['link']);
					if($comments)
						$vids[$count]['comments'] = $comments;
					$this->results_got++;
				}		
			}
			
			$this->get_the_offset();
		}
		
		return $this->results_array = $vids;
	}
	
	
	
	
	
	
	function parse_get_results($apiFeed=NULL)
	{
		
		$this->results_got = 1;
		$vids = array();

		$this->tries++;
		
		if(!$apiFeed)
		$array = xml2array($this->get_feed_url());
		else
		$array = xml2array($apiFeed);
		
	
		$entries = $array['rss']['channel']['item'];
		
		if(empty($entries[0]['title']) && empty($entries['title']))
			break;
		if($entries['title'])
			$entries = array($entries);		
			
		$this->results_found = count($entries);
		
		foreach($entries as $entry)
		{
			if($this->results_got > $this->results)
					break;
				
				if(!$this->ignore_data_exists)
					$data_exists = $this->data_exists(str_replace('http://revver.com/watch/','',$entry['guid']));
				else
					$data_exists = false;
					
			if(is_array($entry) && isset($entry['title']) && isset($entry['media:description']) && !$data_exists)
			{
				$count = $this->results_got;
				$vids[$count]['title'] = $entry['title'];
				$vids[$count]['description'] = $entry['media:description'];
				$vids[$count]['tags'] = implode(',',$entry['category']);
				
				$vids[$count]['embed_code'] = $this->embed_video_code($entry['media:content_attr']['url']);
				$vids[$count]['duration'] = $entry['media:content_attr']['duration'];

				preg_match("/\| (.*) views/",$entry['description'],$views);
				
				$vids[$count]['views'] = $this->get_video_views($entry['link']);
				$vids[$count]['rating'] = 0;
				$vids[$count]['rated_by'] = 0;
				$vids[$count]['category_attr'] = NULL;
				
				$vids[$count]['website'] = $this->website;
				$vids[$count]['url'] = $entry['link'];
				$vids[$count]['unique_id'] = str_replace('http://revver.com/watch/','',$entry['guid']);

				$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'.jpg';
				$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-2.jpg';
				$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-3.jpg';
				$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-4.jpg';
				$vids[$count]['thumbs'][] = 'http://frame.revver.com/frame/120x90/'.$vids[$count]['unique_id'].'-6.jpg';
				
				$vids[$count]['thumbs']['big'] = 'http://frame.revver.com/frame/320x240/'.$vids[$count]['unique_id'].'-5.jpg';
				
				$vids[$count]['date_added'] = date("Y-m-d H:i:s",strtotime($entry['pubDate']));
				
				//Fetching Comments
				$comments = $this->get_comments($entry['link']);
				if($comments)
					$vids[$count]['comments'] = $comments;
				$this->results_got++;
			}		
		}
					
		$this->get_the_offset();
		return $vids;
	}
	
	
	
	
	
	/**
	 * Function used to generate Embed Video Code
	 */
	function embed_video_code($code)
	{
		$sample = '<object width="425" height="344"><param name="movie" value="{FILE}"></param><param name="allowFullScreen" value="true"></param><param name="allowscriptaccess" value="always"></param><embed src="{FILE}" type="application/x-shockwave-flash" width="425" height="344" allowscriptaccess="always" allowfullscreen="true"></embed></object>';
		return preg_replace('/{FILE}/',$code,$sample);
		
	}
	
	/**
	 * function used to get offseet
	 * if will return doubles the MAX_RESULT each time it is called
	 */
	function get_the_offset()
	{
		return $this->result_offset += $this->max_result;
	}
	
	
	/**
	 * Function used to get video comments
	 */
	function get_comments($url)
	{
		if(!$url || !$this->import_comments || $this->import_comments=="no")
			return false;
		$content = str_replace("\n", " ", $this->get_video_details($url));
		
		preg_match_all('/<div id="comment-(.*)" name="comment-(.*)" class="comment">(.*)<p>(.*)<\/p>(.*)<a href="(.*)" class="comment-owner">(.*)<\/a>(.*)<\/div>/Uim',$content,$matches);
		$comments = $matches[4];
		$users = $matches[7];
		$total = count($comments);
		for($i=0;$i<$total;$i++)
		$comm_array[] = array('name'=>$users[$i],'comment'=>strip_tags($comments[$i]),'email'=>'anonymous@revver.com');
		return $comm_array;
	}
	
	/**
	 * Function used to get video details
	 */
	function get_video_details($url)
	{
		if(!$this->video_page)
			$this->video_page = trim($this->open_page($url)); 
		return $this->video_page ;
	}
	
	/**
	 * Function used to get video views and ratings
	 */
	function get_video_views($url)
	{
		$this->get_video_details($url);
		$content = $this->video_page;
		$content = preg_replace(array("/\n+/","/\t+/","/\v+/","/\r+/"), "", $content);
		preg_match('/<p class="views">(.*)<strong>(.*) views<\/strong>/U',$content,$matches);
		return $views = str_replace(',','',$matches[2]);
	}
	
	
	/**
	 * Function used to get details from url
	 */
	function get_details_from_url($url)
	{
		return false;
	
	}
}

?>